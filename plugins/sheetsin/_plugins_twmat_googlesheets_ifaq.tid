caption: IFAQ
created: 20210303034431997
modified: 20210303164807774
tags: 
title: $:/plugins/tiddlygoo/sheetsin/ifaq

!! Infrequently Asked Questions

* Q. How does all this code thing work? Who is Jason, and what does he have to do with the code?

If you have these kind of questions, you've definitely come to the wrong place!

It all begins with a message. This message to be clear:

```
tm-sheetgetdata
```

Which is typically sent from an `<$action-sendmessage ...>` widget inside of a `<$button>` widget. The message should be accompanied by an `id` parameter which identifies the Google spreadsheet, and, optionally, a `sheet` parameter which contains the name of the spreadsheet tab to be loaded. 

This message is handled inside startup module  `sheethandler` which is defined inside of tiddler `$:/plugins/tiddlygoo/sheetsin.js`

Why a startup module? Because that's what everyone else was doing, that's why!

The sheethandler then verifies that `getSheetsData` exists, provides defaults for `id` and `sheet`, and packs them into a parameter object. `getSheetsData` like the rest of the js code used for receiving spreadsheet information, is defined inside of `$:/plugins/tiddlygoo/sheetsin/googlesheets.js`.

Function `getSheetData` then wraps the passed `id` with the url text required by our robot overlords at Google to return the sheet meta information, including tab names, and invokes `scriptRequest` with the url and the parameter object. The invocation looks like this:

```
scriptRequest( url, ok, fail,specs);

```

Where `specs` is the parameter object containing the id and sheet name, and `ok` is the name of the function that should be called if the script Request succeeds.

Inside of `scriptRequest` , a callback object is created and appended to the DOM, and the address of the callback object is appended to the url string. Then the modified url string is used in a get request to Google.

Through deep, dark magic, Google returns the request as a function whose name is the same as that of the callback object added to the DOM. If the invocation didn't fail, then function `ok` is called. Who cares what happens if it isn't successful. It's too sad to think about.

Function `ok` and `ok2` is where most of the processing for conversion from Googlesheet data into tiddlers occurs. Function `ok` is passed a data object that represents the data returned from Google. Function `ok` extracts the spreadsheet name and the tab list. It puts together a report tiddler listing the tabs. It also determines if there is an existing spreadsheet tiddler that stores the spreadsheet data and tab list. If the tiddler doesn't exist, it creates one. Finally, function `ok` invokes scriptRequest again with the name of the requested sheet, requesting the actual data from that sheet. If that request is successful, it will be handled by function `ok2`.

Function `ok2` receives a data object that represents the requested tab sheet from the spreadsheet. Function `ok2` then performs various map activities, creates tiddlers for each incoming cell, and creates an import report.

A side note about the import report created by `ok2`. In making the import report tiddler, `ok2` uses the code's own version  getModificationFields rather than the core's version. This custom version adds 5 seconds to the report time, so that the report will appear at the top of the "recent" list. 

 