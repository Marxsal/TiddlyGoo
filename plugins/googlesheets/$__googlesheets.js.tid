created: 20210213070543285
modified: 20210216180730111
tags: $:/tags/RawMarkup
title: $:/plugins/twmat/googlesheets/googlesheets.js
type: application/javascript

<script>
//Yandex metric counter is located $:/boot/Yandex_Metrika_Counter.js  

var HEEGreadyState="onload";
var corsmax=0;
var corscurrent=0;






function a(i){
	var text="";
	for (var k = 0; k < i; k++){
		text=text+" ";

	}
	return text;
}




var pinframe=0;

if (window.parent.frames.length > 0) {pinframe=1;
}

var mytext="";
var CallbackRegistry = {}; 
function scriptRequest(url, onSuccess, onError,specs) {
	var scriptOk = false; 
	var callbackName = 'cb' + String(Math.random()).slice(-6);
	url += ~url.indexOf('?') ? '&' : '?';
	url += 'callback=CallbackRegistry.' + callbackName;
	CallbackRegistry[callbackName] = function(data) {
		scriptOk = true; 
		delete CallbackRegistry[callbackName]; 
		onSuccess(data,specs); 
	};

	function checkCallback() {
		if (scriptOk) return; 
		delete CallbackRegistry[callbackName];
		onError("\n-- The selected googlesheet tiddler probably has a missing or faulty spreadsheet-id.\n"+url
			 ); 
	}

	var script = document.createElement('script');
	script.onreadystatechange = function() {
		if (this.readyState == 'complete' || this.readyState == 'loaded') {
			this.onreadystatechange = null;
			setTimeout(checkCallback, 0); 
		}
	}
	script.onload = script.onerror = checkCallback;
	script.src = url;
	document.head.appendChild(script);
}


function ok(data,specs) { 
    // alert("OK!" ) ;
    //var spreadsheetsmail=data.feed.author[0].email.$t;
    //if(SpreadsheetsUse!="hide"){ setAttr("mail", spreadsheetsmail); }
   

	var spreadsheetName = data.feed.title.$t ;
	//var dataId = id.t https //spreadsheets.google.com/feeds/worksheets/1QUoZosiS3emBQNM_HugaptU5qY1Ze5lBQXVd8yZit6A/public/values/osgb28m"
    var tabList = [] ;
	for (var i1=0; i1<data.feed.entry.length; i1++) {
		//var temp = data.feed.entry[i1].title.$t ; 
		//alert(temp) ;
		tabList.push(data.feed.entry[i1].title.$t) ; 
	}
	//alert( tabList.length) ;
	var needsNewSpreadsheetTiddler = true;
	var sheetTiddlers = $tw.wiki.getTiddlersWithTag("SpreadsheetTiddler") ;
	//alert("Sheet tiddlers: "+sheetTiddlers) ;
	//var tiddler ;
	for (var item of sheetTiddlers) {
        tiddler = $tw.wiki.getTiddler(item) ;
		//var temp = tiddler.getFieldString("spreadsheet-id") ;
		//alert("I see item "+item + " with id =" + temp + " specs.id=="+specs.id) ;

		if(tiddler.getFieldString("spreadsheet-id") == specs.id ) {
			//alert("I see id " + specs.id ) ;
			needsNewSpreadsheetTiddler = false ;
			var curTabList=$tw.wiki.getTiddlerList(item,"sheet-tabs") ;
			
			if(JSON.stringify(curTabList.sort()) !== JSON.stringify(tabList.sort())) {
				//alert("I see item "+item + " and sheets "+tabList) ;
				var tabListString = $tw.utils.stringifyList(tabList) ;
				//alert(tabListString) ;
				$tw.wiki.setText(item,"sheet-tabs",0,tabListString) ;
				$tw.wiki.setText(item,"updated",0,"yes") ;
			}
		}
	}
	
	// Make new tiddler if there wasn't one to update
	if(needsNewSpreadsheetTiddler) {
		//alert("I think it needs a new spreadsheet tiddler!") ;
		var fields = Object.create(null);
		fields["sheet-tabs"] = $tw.utils.stringifyList(tabList) ; 
		fields.text=
			'This is a spreadsheet tiddler for importing from ' +
			'<a href={{{ [[https://docs.google.com/spreadsheets/d/]addsuffix{!!spreadsheet-id}addsuffix[/edit#gid=0]] }}} ' +
			'rel="noopener noreferrer" target="_blank">this Google spreadsheet</a>. ' +
			'You can edit the tiddler title, the text and the description freely. ' +
			'See the [[plugin readme|$:/plugins/twmat/googlesheets/readme]] for more info.<br>' +
			'Current sheets: <<list-links "[enlist{!!sheet-tabs}]">>' ;
		fields.title = spreadsheetName  ;
		fields["spreadsheet-id"] = specs.id ;
		fields.tags = "SpreadsheetTiddler" ;
		if($tw.browser) {$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getModificationFields(),fields,$tw.wiki.getCreationFields()))} 
	}

	var fields = Object.create(null);
	
	//alert(regstr) ; 
    // CURRENT
	if(specs.sheet == "__SHEET_NAMES_ONLY__") {
		var reportText = "", reportList="" ;
		for (var i1=0; i1<data.feed.entry.length; i1++) {
			reportText += "* [[" + data.feed.entry[i1].title.$t + "]]\n" ; 
			reportList += "[[" + data.feed.entry[i1].title.$t + "]] " ; 
		}
		fields.list=reportList ;
		fields.text=reportText ;
		fields.title = "Sheets in \""+spreadsheetName + "\"" ;
		fields.tags = "GooglesheetsReport" ;
		if($tw.browser) {$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getModificationFields(),fields,$tw.wiki.getCreationFields()))}   
		return ;
	}
   
	corsmax=data.feed.entry.length; 
    var patt = new RegExp(specs.sheet) ; // Why do c/r come with regstr??
    for (var i1=0; i1<data.feed.entry.length; i1++) {
        //alert("sheet?: "+data.feed.entry[i1].title.$t) ;
        //alert("True or false for "+ data.feed.entry[i1].title.$t + " matched \nwith /" + regstr + "/ is: " +patt.test(data.feed.entry[i1].title.$t));
        if(patt.test(data.feed.entry[i1].title.$t)) {
            scriptRequest(data.feed.entry[i1].link[0].href+"?alt=json-in-script", ok2, fail,specs);
        }
    }
}


function ok2(data2,specs) {  
    var currsheet=data2.feed.title.$t;
    var titleList = {} ;
    var fieldsList = {} ;

    if(currsheet.indexOf("hide")==0 || data2.feed.entry==undefined){return;};
    //console.log(currsheet);
    var new_value="";

    for (var i=0; i<data2.feed.entry.length; i++){ 
        var fields = Object.create(null); 
        for (var key in data2.feed.entry[i]) {
            if(key.match(/^gsx\$+/i)){ 
                new_value=data2.feed.entry[i][key].$t;
                if(key=="gsx$id"){ 
                    fields.title=new_value} 
                else if(key=="gsx$url" && currsheet=="images"){ 
                    fields._canonical_uri=new_value; }
                else if(key.indexOf("gsx$hide")==0){
                    //console.log(key)
                } 
                else { 
                    var new_key=key.slice(4);
                    if(new_value.length>0){fields[new_key]=new_value; }
                };
            } // if key match
        } // for (var key...

        if(currsheet=="images" ){ 
            fields.type="image/jpeg"  }
        else {
            var tags= typeof fields.tags !== "undefined" ? fields.tags : "" ; 
            fields.tags = tags + " [[" + currsheet + "]] " ;
        }
        
        if( typeof fields.title === "undefined" || ! fields.title )  {
            var defaultTitle = 'Default-' + String(Math.random()).slice(-6);
            fields.title = defaultTitle ;
        }
        
        // Add title to working list
        titleList[fields.title]=1 ; // Eventually make this a running count
        // Add fields to track if there's anything odd
        for(fld in fields) { fieldsList[fld] = 1 ; } 

        //fields.i=i+2;
        if($tw.browser) {$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getModificationFields(5000),fields,$tw.wiki.getCreationFields()))}   

        if(i==data2.feed.entry.length-1){
            corscurrent=corscurrent+1;
            if(corscurrent==corsmax-1){

 
			} // if corscurrent=corsmax-1
        } // if i==data2.feed.entry ....
    } // for var=0 loop


        // Create report list
        var reportText = "!! Tiddlers imported from ~GoogleSheets: \n\n" ;
        var reportFields = Object.create(null);
        var stamp = data2.feed.updated.$t;    
        reportText += "\n\nData as of "+stamp+"\n\n" ;
        for (var key in titleList ) {
            reportText += "* [[" + key + "]] \n" ;
        }
        reportText += "\n\n----\n\n" ;
        reportText += "!! Fields used:\n\n" ;
        for (var key in fieldsList ) {
            reportText += "* " + key + "\n" ;
        }
        reportFields.title = "Report for \"" + currsheet + "\"";
        reportFields.text = reportText ;
		reportFields.tags = "GooglesheetsReport" ;

        if($tw.browser) {$tw.wiki.addTiddler(new $tw.Tiddler(getModificationFields(5000),reportFields,$tw.wiki.getCreationFields()))}   


} // function ok2



function fail(url) {
	alert( 'Error on request ' + url );
}


function getUrlVars() {
	var vars = {};
	var parts = window.location.href.replace(/[?&|?#]+([^=&|^=#]+)=([^&|^#]*)/gi, function(m,key,value) {
		vars[key] = value;
	});
	return vars;
}



function getSheetsData(specs) {
    //alert("I see "+worksheets_id+" with pattern "+regstr) ;
	//var fields = Object.create(null);
	//fields.title="$:/StoryList";fields.list="";
	//       if($tw.browser) {$tw.wiki.addTiddler(new $tw.Tiddler($tw.wiki.getModificationFields(),fields,$tw.wiki.getCreationFields()))};
	scriptRequest("https://spreadsheets.google.com/feeds/worksheets/"+specs.id+"/public/values?alt=json-in-script", ok, fail,specs);
}

/*
Return a hashmap of the fields that should be set when a tiddler is modified
*/
function getModificationFields(offset = 0) {
	//offset = (typeof offset !== 'undefined') ?  offset : 0 ;
	var fields = Object.create(null),
	    modifier = $tw.wiki.getTiddlerText("$:/status/UserName");
	fields.modified = new Date((new Date()).getTime()+offset);
	if(modifier) {
		fields.modifier = modifier;
	}
	return fields;
};
  



</script>
